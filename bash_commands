pwd: print working directory

cd: change directory(use tab while typing commands)

ls: list all files
ls -l(long flag): list all files with details
	-rw-rw-r-- (tells that it is a file)
ls -la(show hidden files): list all files even hidden 1
	. (current directory)
	..(parent directory)
	.git(every folder is initialized with a git)

cat [fileName]: show content of file
cat -n [fileName]: show content of file with line number
less [fileName]: show content of file with a better UI(like nano editor)
	shift+g => bottom of file
	g => top of file
	/[any_word] => search the file for word
	q => takes back to bash screen

open . (MacOS) && xdg-open .(Ubuntu)=>  opens the current directory folder(MacOS) (. stands for current folder)
open .git(MacOS) && xdg-open .git(Ubuntu) => opens the git directory in current folder
open button.js (MacOS) && xdg-open button.js (Ubuntu)=> opens the .js file in default application, (In Ubuntu, mostly opens in textEditor)

CREATE A NEW FILE:
touch [create a new file with any extension]: creates a new file with any extension provided
EDIT A FILE:
echo "any text in the world" > [fileName created with touch or any]: logs the echo inside the name provided file(basically, echo logs everything in quotes)
	echoing into a file just re-writes into the file.
APPEND A FILE:
echo "any text in the world" >> [fileName created with touch or any]: appends the file with previous content.
	echo also creates the file if not present
CREATING A FILE WITH ECHO:
echo "any text in the world" > [fileName you want to create]: logs the text in the file created with echo by name provided

mkdir [folder_Name]: creates a folder with provided name
mkdir -p [folder_name with directories( eg: a/b/c)]: creates a folder c within b within a(nested folder)
ls a/b: lists the files and folder inside folder b if present.
rm [file_name present in current directory]: deletes the file permanently from the folder
rm -r [folder_name]: removes the folder from the current directory
rm -rf [folder_name]: removes the folder from the current directory

mv [file_name] directory/[file_name]: moves the file inside given directory.
mv [file_name1] [file_name2]: renames the file in same directory.
mv [folder_name1]/ [folder_name2]: changes the folder name in same directory.
mv [folder_name1]/* [folder_name2]: moves(cut and paste) the content of folder_name1 to folder_name2
cp [file_name] [folder_name]/[file_name]: copy file to given folder.
cp -R [folder_name1]/ * [folder_name2]/: copy all content of a folder_name1 to folder_name2.

FIND FILES AND FOLDER WITH "FIND" IN BASH:
find [folder_name (in current directory)]/ -name "*.[file_extension or any file_name]": finds the file in given folder with searched string.
find [folder_name (in current directory)]/ -iname "*.[file_extension or any file_name]": finds the file in given folder with searched string(Case-sensitive_search).
find . -type d: find all folders in my current working directory
find . -type d -name ["folder_name"]: finds all folders with given name in current directory
find . -type d -inmae ["folder_name"]: finds all folders with given name in current directory(Case-sensitive_search).
find [folder_name(within current directory)]/ -name ["file_name" or  any extension in quotes] -delete: deletes all the files in given folder with given name or extension
find [folder_name]/ -name "*[file_name] or any extension" -exec pngquant {} \;: compresses the files with given name or extensions or optimizes.
man find: manual help for find.

SEARCH FOR TEXT WITH "GREP":
grep "any_text_in_the_world" [folder_name(present in current directory)]/[file_name(present in given directory)]: finds all usage of given text in given file under given folder.
grep "any_text_in_the_world" [folder_name(present in current directory)]/**/*[file_name or any extension(present in given directory)]: finds all usage of given text in given directory in each file.
grep --color -n "any_text_in_the_world" [folder_name(present in current directory)]/[file_name(present in given directory)]: same as 1st command in same section just adds color to searched text and also shows line number.
grep --color -n -C 3 "module.exports" nodejs/**/*.js: -C flag shows content about 3 lines up and below of match.
grep --color -n -e "[firstlast]name" nodejs/**/*.js: -e is a regex flag which searches for firstname and lastname in all .js files in given directory.
man grep

MAKE HTTP REQUEST IN BASH WITH "CURL":                                                      
curl https://example.com => get request to a website
curl https://swapi.co/api/people/1/ => a call to star wars api, returns json object.
curl -i https://swapi.co/api/people/2 => i stands for including header and returns header for api request.(check the location, this is where curl wants us to redirect)
curl -iL https://swapi.co/api/people/2 => L redirects us to desired location.
curl -H "Authorization: Bearer 123" localhost:8081/[api_location]: makes a get request to given api and localhost port might vary.(8081 is default for react-native)      //    EGGHEAD.IO    Video-8, 2:00
curl -X POST -H "Content-Type: application/json" -d '{"title": "curling", "author": "Manoj"}' http://localhost:8081/ => a post request to given api at given location.          //     EGGHEAD.IO    Video-8, 2:00
curl -i -X POST --data-urlencode title="Curling again" --data-urlencode author="Manoj Yadav" localhost:8081/ => changing the previously posted json object.
curl -i -X PUT \
> -d '{ "title": "title_Changed"}' \
> -H "Content-Type: application/json" \
> http://localhost:8081/
	=> creates a put request on the given port and server changing the title and header.
curl -iL https://google.com -o google.txt => creates a google.txt in present directory and logs in the response given by api_request.
curl https://swapi.co/api/people/1/ | jsome => logs json obect in a better UI with help of jsome utility.

CREATE AND RUN BASH SCRIPTS WITH COMMAND LINE ARGUMENTS:
touch script.sh => create a bash script(.sh)
nano script.sh => opening the file with nano editor
modify the script in nano editor and run (./script.sh) gives permission denied error.
ls -l gives a detail of file -rw-r--r-- 1(i.e. read, write, execute permission is not given)
chmod u+x script.sh => change mode of user to execute file.
						CREATING A NEW PROECT-TYPE INIT:
1. create a new folder
2. create a new script file in folder(.sh file)
3. open that file in nano
4. start typing: 
	a. echo "Initializing JS project at $(pwd)"
	b. git init
	c. npm init -y                                    #create a package.json with all the defaults
	d. mkdir src                                      # create a src folder in given folder
	e. touch src/index.js                   # create a src folder in given folder
	f. code.                                                # open src/index.js
5. echo $PATH => lists all executables location in your system
6. which node => location where node is located
7. copy the .sh file to usr/local/bin/init-js
8. run the .sh file in any folder.

STORE AND USE VALUES WITH BASH VARIABLES:
var=123    (no spaces)
echo $var (var is for this bash session only)
	1. create a script file(.sh) => nano new_file.sh
	2. modify the script => echo $var
	3. run the script => ./new_file.sh
	4. output is blank
	5. to make the var visible to all processes => export var
	6. run again the script => ./new_file.sh
	7. output => 123
	8. to make var again invisible to all processses => unset var
	9. output is again blank.
env => global and local variables.
echo $[any_variable_provided_by_env] => gives value
					CLONING A BRANCH OF A LOCAL GIT REPO TO TEMP FOLDER
	1. nano clone_to_temp.sh => opens nano editor with given file_name.
	2. in nano editor:
		a. temp=$(mktemp -d) => mktemp will create a temporary file or folder and location of that will be saved in temp.
		b. git clone --branch $1 $PWD $temp => cloning a branch of local git repository in current working directory(pwd). in temp folder.
		c. echo "branch $1 clone to $temp"
		d. #run some tasks, tests, etc.
	3. chmod u+x clone_to_temp.sh => change user permission
	4. git add . && git commit -am "initial"
	5. git branch new
	6. ./clone_to_temp.sh new


















